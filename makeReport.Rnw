\documentclass[11pt]{article} % article?
\usepackage{geometry} %
\geometry{a4paper} % or letter or a5paper or ... etc
\usepackage{graphicx}
\usepackage{subfig} % for tiled graphics
\usepackage{float}
\usepackage{amssymb,amsmath}
\geometry{letterpaper, top=1in, left=1in, right=1in, bottom=1in} % to set margins

\usepackage{multirow}

% for suppressing figure numbers in captions.
\usepackage{caption}
\captionsetup[figure]{labelformat=empty}% redefines the caption setup of the figures environment

\usepackage{draftwatermark}
\SetWatermarkText{DRAFT}
\SetWatermarkScale{8}

\usepackage{setspace}
\onehalfspacing

%%% BEGIN DOCUMENT
\begin{document}


%\maketitle


<<load-packages, echo=FALSE, message=FALSE, warning=FALSE>>=
library(devtools)
library(dengueThailand)
library(spatialpred)
@


<<inputs, echo=FALSE, message=FALSE>>=
library(lubridate)
library(dplyr)
library(ggplot2)

#options(echo=TRUE)
#args <- commandArgs(trailingOnly = TRUE)

#if(length(args)==0)
# args <- Sys.Date()

DATA_THRU_WEEK <- 14 ## number from Thai filename 
transmittal_date <- "20150416" ## date data transmitted from thais
        
ANALYSIS_DATE <- "20150423" #as.character(Sys.Date(), "%Y%m%d")
DELIVERY_DATE <- "20150423" #as.character(Sys.Date(), "%Y%m%d") ## del date used in data pulls


current_biweek <- date_to_biweek(ymd(transmittal_date))
biweek_lag <- 4

min_plot_date <- as.Date('2012-04-01')

report_year <- year(ymd(transmittal_date))
@


<<setup, echo=FALSE, message=FALSE>>=
## load country data used in forecast
cntry_data_file <- paste0(ANALYSIS_DATE, 
                          "_cntrydata_", 
                          DELIVERY_DATE, 
                          ".rda")
load(file = paste0("forecasts/", cntry_data_file))

## load forecasts
forecasts_file <- paste0(ANALYSIS_DATE, 
                         "_forecast_", 
                         DELIVERY_DATE, 
                         ".csv")
forecasts <- read.csv(file.path('forecasts', forecasts_file))

## load count data
counts_file <- paste0(ANALYSIS_DATE, 
                      "_newcounts_",
                      DELIVERY_DATE, 
                      ".csv")
counts <- read.csv(file.path('forecasts', counts_file), stringsAsFactors=FALSE)

## aggregate count data
# counts <- counts %>%
#         filter(as.Date(delivery_date) <= as.Date(DELIVERY_DATE, "%Y%m%d")) %>%
#         group_by(disease, date_sick_year, date_sick_biweek, province) %>%
#         summarize(count=sum(count))
@


\noindent {\Large \bf{Real-time Forecasts of Dengue Fever in Thailand}}\\
{\large Nicholas Reich, Krzysztof Sakrejda, Stephen Lauer, Hannah Clapham,\\ Henrik Salje, Derek Cummings, Justin Lessler}\\
\Sexpr{format(now(), "%d %B %Y")}

\noindent \rule{\textwidth}{1pt}
{\bf These forecasts should be considered preliminary drafts, pending model validation.} 
\noindent \rule{\textwidth}{1pt}


<<map1, fig.height=4, fig.width=2.5, dpi=200, eval=TRUE, echo=FALSE, message=FALSE, dev="png", include=FALSE, cache=FALSE, dev.args=list(bg='transparent')>>=
plot_forecast_map(forecast_data=forecasts, 
                  cdata=dat, 
                  include_legend=FALSE,
                  biweek_to_plot=current_biweek-3, 
                  plot_type="outbreak")
@

<<map2, fig.height=4, fig.width=2.5, dpi=200, eval=TRUE, echo=FALSE, message=FALSE, dev="png", include=FALSE, cache=FALSE, dev.args=list(bg='transparent')>>=
plot_forecast_map(forecast_data=forecasts, 
                  cdata=dat, 
                  include_legend=FALSE,
                  biweek_to_plot=current_biweek-1, 
                  plot_type="outbreak")
@

<<map3, fig.height=4, fig.width=5, dpi=200, eval=TRUE, echo=FALSE, message=FALSE, dev="png", include=FALSE, cache=FALSE, dev.args=list(bg='transparent')>>=
plot_forecast_map(forecast_data=forecasts, 
                  cdata=dat, 
                  biweek_to_plot=current_biweek+1, 
                  include_legend=TRUE,
                  plot_type="outbreak")
@

% load all outbreak probability figures
\begin{figure}[H]
\caption{Probability of dengue fever outbreaks occuring by province in Thailand. An outbreak is when the forecasted cases are more than 2 standard deviations above the average number of cases for the given biweek, across the last 8 years with the the largest epidemic year left out.  Forecasts are made for biweekly periods. Dates in the figures indicate the first day of the forecasted biweek.  }
\begin{tabular}{lll}
  \includegraphics[width=.25\linewidth]{figure/map1-1.png} &   \includegraphics[width=.25\linewidth]{figure/map2-1.png} &   \includegraphics[width=.5\linewidth]{figure/map3-1.png}
\end{tabular}
\end{figure}

\noindent \rule{\textwidth}{1pt}

<<cntryLinegraph, echo=FALSE, message=FALSE, warning=FALSE, fig.height=3.5>>=
make_country_prediction_line_graph(forecasts, counts, ylim_scale=3, show_unused_counts=FALSE)
@


\section*{Executive summary}
This file presents the current forecasts for dengue fever in Thailand, based on data from the Thai Ministry of Public Health. The data in this report was transmitted to researchers at UMass-Amherst and Johns Hopkins University on \Sexpr{format(ymd(transmittal_date), "%d %B %Y")}.

The forecasts presented here are based on models that have been fit to data from 01 January 1968 through \Sexpr{format(ymd(transmittal_date), "%d %B %Y")}. 
Based on historical reporting patterns, we have seen that most provinces take up to 4 biweeks (about 8 weeks) to have fully reported case data. Our current models use all available data excluding cases reported in the most recent 4 completed biweeks. We are working on building models that can also use these more recent, incompletely reported, case counts. Our models currently forecast incident cases for each Thai province for six sequential biweek periods. For each province, the forecast is based on (1) historical seasonal dynamics of dengue in that province, and (2) observed case counts at the previous time-point from that province and from two other provinces that have historically shown strong correlations with this one. We use Poisson generalized linear additive models to fit these data and create the forecasts.




\begin{table}[htdp]
\caption{Summary of relevant dates for this report.}
\begin{center}
\begin{tabular}{rl}
Data received through: & Week \Sexpr{DATA_THRU_WEEK}, \Sexpr{report_year} \\
Most recent data transfer: & \Sexpr{format(ymd(transmittal_date), "%d %B %Y")} (in biweek \Sexpr{current_biweek})\\
Data assumed complete through: & \Sexpr{format(biweek_to_date(current_biweek-biweek_lag, year(ymd(transmittal_date)))-1, "%d %B %Y")} (end of biweek \Sexpr{current_biweek-biweek_lag-1})  \\
Forecasts made for: & all remaining biweeks in \Sexpr{format(ymd(transmittal_date), "%Y")}
% & biweek \Sexpr{current_biweek-biweek_lag} (starts on \Sexpr{format(biweek_to_date(current_biweek-biweek_lag, year(ymd(transmittal_date))), "%d %B %Y")}) \\ 
% & biweek \Sexpr{current_biweek-biweek_lag+1} (starts on \Sexpr{format(biweek_to_date(current_biweek-biweek_lag+1, year(ymd(transmittal_date))), "%d %B %Y")}) \\
% & biweek \Sexpr{current_biweek-biweek_lag+2} (starts on \Sexpr{format(biweek_to_date(current_biweek-biweek_lag+2, year(ymd(transmittal_date))), "%d %B %Y")}) \\ 
% & biweek \Sexpr{current_biweek-biweek_lag+3} (starts on \Sexpr{format(biweek_to_date(current_biweek-biweek_lag+3, year(ymd(transmittal_date))), "%d %B %Y")}) \\ 
% & biweek \Sexpr{current_biweek-biweek_lag+4} (starts on \Sexpr{format(biweek_to_date(current_biweek-biweek_lag+4, year(ymd(transmittal_date))), "%d %B %Y")}) \\ 
% & biweek \Sexpr{current_biweek-biweek_lag+5} (starts on \Sexpr{format(biweek_to_date(current_biweek-biweek_lag+5, year(ymd(transmittal_date))), "%d %B %Y")}) \\
\end{tabular}
\end{center}
\label{tab:forecast-summary}
\end{table}%

%\section*{Key results}
%At this time, we forecast that no provinces have a greater than 50\% probability of an outbreak through biweek 7. The figures on the following pages show the observed data (red lines) and our predictions (solid black lines) with confidence intervals (dashed black lines). 


%To dos:
%\begin{itemize}

%        \item sort provinces by region
%        \item provide annotated graphic at beginning?
%        \item add more informative temporal labels on spatial graphic
        
%\end{itemize}

<<make-full-year-estimate, warning=FALSE, message=FALSE, echo=FALSE, results='asis'>>=
library(xtable)
data(thai_prov_data)
tpd <- thai_prov_data %>% 
        transmute(province_num=ISO,
                  province_fips=FIPS,
                  province_name=reorder(Province, Population),
                  health_region=MOPH_Admin_Code)
first_biweek_predicted <- min(forecasts$biweek)
region_counts <- tbl_df(counts) %>% 
        filter(date_sick_year == report_year, disease==26, date_sick_biweek<first_biweek_predicted) %>%
        left_join(tpd, by=c("province" = "province_num")) %>%
        group_by(health_region) %>%
        summarize(region_total_observed=sum(count))
region_counts_last_yr <- tbl_df(counts) %>% 
        filter(date_sick_year == report_year-1, disease==26) %>%
        left_join(tpd, by=c("province" = "province_num")) %>%
        group_by(health_region) %>%
        summarize(region_total_observed_last_yr=sum(count))
region_forecasts <- tbl_df(forecasts) %>%
        left_join(tpd, by=c("pid" = "province_fips")) %>%
        group_by(health_region) %>%
        summarize(region_total_forecasted=sum(predicted_count),
                  region_lb=sum(lb),
                  region_ub=sum(ub))
region_totals <- left_join(region_counts, region_forecasts) %>% 
        left_join(region_counts_last_yr) %>%
        mutate(region_total_forecasted = region_total_forecasted+region_total_observed,
               region_lb = region_lb+region_total_observed,
               region_ub = region_ub+region_total_observed)

cnames <- c(" 
            & \\multicolumn{2}{c}{\\bf counts for this year} & \\multicolumn{2}{c|}{\\bf 95\\% CI} & \\bf counts for last year \\\\
            MOPH Region & observed & predicted & lower & upper & observed \\\\
            ")
print(xtable(round(region_totals), digits=0, align="cc|cccc|c",
             caption="Predictions for full year."), 
      include.rownames=FALSE, include.colnames=FALSE,
      add.to.row = list(pos=list(0), command=cnames),
      hline.after=0, caption.placement="top")
@




<<allDataCheck, eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE>>=
data(thai_prov_data)
tpd <- thai_prov_data %>% 
        mutate(province=ISO,
               province_name=reorder(Province, Population),
               health_region=MOPH_Admin_Code) %>%
        select(province_name, province, health_region) 
counts_prov_name <- left_join(counts, tpd)
ggplot(counts_prov_name) + theme_bw() +
        geom_raster(aes(x=date_sick_year+(date_sick_biweek-1)/26, 
                        y=province_name, 
                        fill=log10(count))) +
        facet_grid(facets=health_region~., drop=TRUE, space="free", scales="free_y") + 
        xlab("") + ylab("") +
        scale_fill_gradient2(low="green", mid="yellow", high="red", midpoint=1, limits=c(0, 4))
        
        #+ facet_wrap(~disease, ncol=1, scales="free_x")
@





<<dataPrep, echo=FALSE, message=FALSE, warning=FALSE>>=
forecasts_prov <- get_forecast_prov_data(forecasts)
counts_prov <- get_count_prov_data(counts, forecasts_prov, min_plot_date)
@

<<prov_linegraphs_r0, echo=FALSE, message=FALSE, warning=FALSE, fig.height=4>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=0, show_unused_counts=FALSE)
@

<<prov_linegraphs_r1, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=1, show_unused_counts=FALSE)
@

<<prov_linegraphs_r2, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=2, show_unused_counts=FALSE)
@

<<prov_linegraphs_r3, echo=FALSE, message=FALSE, warning=FALSE, fig.height=8>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=3, show_unused_counts=FALSE)
@

<<prov_linegraphs_r4, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=4, show_unused_counts=FALSE)
@

<<prov_linegraphs_r5, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=5, show_unused_counts=FALSE)
@

<<prov_linegraphs_r6, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=6, show_unused_counts=FALSE)
@

<<prov_linegraphs_r7, echo=FALSE, message=FALSE, warning=FALSE, fig.height=8>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=7, show_unused_counts=FALSE)
@

<<prov_linegraphs_r8, echo=FALSE, message=FALSE, warning=FALSE, fig.height=8>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=8, show_unused_counts=FALSE)
@

<<prov_linegraphs_r9, echo=FALSE, message=FALSE, warning=FALSE, fig.height=8>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=9, show_unused_counts=FALSE)
@

<<prov_linegraphs_r10, echo=FALSE, message=FALSE, warning=FALSE, fig.height=8>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=10, show_unused_counts=FALSE)
@

<<prov_linegraphs_r11, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=11, show_unused_counts=FALSE)
@

<<prov_linegraphs_r12, echo=FALSE, message=FALSE, warning=FALSE, fig.height=10>>=
make_province_prediction_line_graph(forecasts_prov, counts_prov, region=12, show_unused_counts=FALSE)
@


\end{document}